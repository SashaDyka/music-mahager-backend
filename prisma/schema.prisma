
generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  displayName  String
  createdAt    DateTime @default(now())
  songs        Song[]
  playlists    Playlist[]
  likes        Like[]
  follows      Follow[] 
  playHistory  PlayHistory[]
  shareLinks       ShareLink[]
  streamingRooms   StreamingRoom[]

  @@map("users")
}

model Artist {
  id      String  @id @default(cuid())
  name    String
  albums  Album[]
  songs   Song[]
  followers Follow[]

  @@map("artists")
}

model Album {
  id        String  @id @default(cuid())
  title     String
  artist    Artist  @relation(fields: [artistId], references: [id])
  artistId  String
  year      Int?
  coverUrl  String?
  songs     Song[]
  
  @@map("albums")
}

model Song {
  id           String  @id @default(cuid())
  title        String
  durationSec  Int
  sourceType   String
  audioUrl     String   
  album        Album?   @relation(fields: [albumId], references: [id])
  albumId      String?
  artist       Artist?  @relation(fields: [artistId], references: [id])
  artistId     String?
  likes        Like[]
  playlistRefs PlaylistSong[]
  playHistory  PlayHistory[] 
  ownerId      String   
  owner        User     @relation(fields: [ownerId], references: [id])
  createdAt    DateTime @default(now())

  @@map("songs")
}

model Playlist {
  id        String  @id @default(cuid())
  title     String
  owner     User    @relation(fields: [ownerId], references: [id])
  ownerId   String
  isPublic  Boolean @default(true)
  songs     PlaylistSong []
  createdAt DateTime @default(now())

  @@map("playlists")
}

model PlaylistSong {
  id         String  @id @default(cuid())
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  song       Song    @relation(fields: [songId], references: [id])
  songId     String
  order      Int

  @@map("playlist_song")
}

model Like {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  song    Song  @relation(fields: [songId], references: [id])
  songId String
  @@unique([userId, songId])

  @@map("likes")
}

model Follow {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String
  @@unique([userId, artistId])

  @@map("follows")
}

model PlayHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  song      Song    @relation(fields: [songId], references: [id])
  songId    String
  playedAt  DateTime @default(now())
  
  @@map("play_history")
}

model ShareLink {
  id          String    @id @default(uuid())
  targetType  ShareTargetType
  targetId    String
  expiresAt   DateTime?
  revoked     Boolean   @default(false)
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String

  @@map("share_link")
}

enum ShareTargetType {
  Song
  Playlist
}

model StreamingRoom {
  id          String    @id @default(uuid())
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String
  status      RoomStatus @default(INACTIVE)

  @@map("streaming_room")
}

enum RoomStatus {
  INACTIVE
  ACTIVE
}

