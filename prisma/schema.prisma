
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  displayName  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  songs        Song[]
  playlists    Playlist[]
  playHistory  PlayHistory[]
  shareLinks       ShareLink[]
  streamingRooms   StreamingRoom[]

  @@map("users")
}

enum SourceType {
  LOCAL
  S3
  EXTERNAL   
}


model Song {
  id           String  @id @default(cuid())
  title        String
  durationSec  Int
  sourceType   SourceType 
  audioUrl     String   
  playlistRefs PlaylistSong[]
  playHistory  PlayHistory[] 
  ownerId      String   
  owner        User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@index([ownerId, createdAt])
  @@map("songs")
}

model Playlist {
  id        String  @id @default(cuid())
  title     String
  owner     User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  isPublic  Boolean @default(true)
  songs     PlaylistSong []
  createdAt DateTime @default(now())

  @@index([ownerId, createdAt])
  @@map("playlists")
}

model PlaylistSong {
  id         String  @id @default(cuid())
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String
  song       Song    @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId     String
  position   Int

  @@unique([playlistId, songId])        
  @@unique([playlistId, position])      
  @@index([playlistId, position])

  @@map("playlist_song")
}

model PlayHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  song      Song    @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId    String
  playedAt  DateTime @default(now())
  
  @@index([userId, playedAt(sort: Desc)])
  @@index([songId, playedAt(sort: Desc)])
  
  @@map("play_history")
}

model ShareLink {
  id          String    @id @default(uuid())
  token       String          @unique @default(cuid())
  targetType  ShareTargetType
  targetId    String
  expiresAt   DateTime?
  revoked     Boolean   @default(false)
  owner       User      @relation(fields: [ownerId], references: [id],  onDelete: Cascade)
  ownerId     String
  createdAt   DateTime        @default(now())

  @@index([ownerId, createdAt])
  @@index([targetType, targetId])
  @@index([expiresAt])

  @@map("share_link")
}

enum ShareTargetType {
  Song
  Playlist
}

enum RoomStatus {
  INACTIVE
  ACTIVE
}

model StreamingRoom {
  id          String     @id @default(uuid())
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  status      RoomStatus @default(INACTIVE)
  roomCode    String?    @unique 
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([ownerId, status])
  @@map("streaming_room")
}
